schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Backlog {
  id: UUID!
  issues: [Issue!]!
  project: Project!
  title: String!
}

type Epic {
  id: UUID!
  name: String!
  short: String!
}

type Issue {
  backlog: Backlog!
  description: String!
  epic: Epic
  id: UUID!
  importance: Importance!
  name: String!
  number: Int!
  points: Int!
  state: State!
  type: IssueType!
}

type Mutation {
  createBacklog(project: UUID!, title: String!): Backlog!
  createIssue(create: IssueCreateInput!): Issue!
  createProject(name: String!, short: String!): Project!
  removeBacklog(id: UUID!): Backlog!
  removeIssue(id: UUID!): Issue!
  removeProject(id: UUID!): Project!
  updateIssue(update: IssueUpdateInput!): Issue!
}

type Project {
  backlogs: [Backlog!]!
  id: UUID!
  name: String!
  short: String!
}

type Query {
  "Returns all backlogs"
  backlogs: [Backlog!]!
  "Returns all epics"
  epics: [Epic!]!
  "Returns all issues"
  issues: [Issue!]!
  "Returns all projects"
  projects: [Project!]!
  "Returns all states"
  states: [State!]!
}

type State {
  id: UUID!
  name: String!
}

type Subscription {
  "Returns subscribed issue when it changes"
  changedIssue(id: UUID!): Issue!
  "Returns a random number every second"
  counter(limit: Int): Int!
}

enum Importance {
  HIGH
  LOW
  MEDIUM
}

enum IssueType {
  BUG
  DEPT
  IMPROVEMENT
  TASK
}

"A type representing a formatted java.util.UUID"
scalar UUID

input IssueCreateInput {
  backlog: UUID!
  description: String!
  epic: UUID
  importance: Importance!
  name: String!
  points: Int!
  state: UUID!
  type: IssueType!
}

input IssueUpdateInput {
  description: String
  epic: UUID
  id: UUID!
  importance: Importance
  name: String
  points: Int
  state: UUID
}
