schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    me: User
    boards: [Board!]
}

type Mutation {
    createBoard(name: String!): Board!
    updateBoard(id: ID!, board: BoardInput!): Board!
    deleteBoard(id: ID!): String
}

type Subscription {
    time: String
}

input BoardInput {
    name: String
}

type User {
    id: ID!
    userName: String!
    firstName: String!
    lastName: String!
}

type Project {
    id: ID!
    name: String!
    shortName: String!
    backlogs: [BackLog!]!
    boards: [Board!]!
}

type BackLog {
    id: ID!
    name: String!
    issues: [Issue!]!
}

type Board {
    id: ID!
    backlog: BackLog!
    states: [State!]!
    # TODO filter
}

type Issue {
    id: ID!
    title: String!
    description: String!
    number: Int!
    points: Int
    flagged: Boolean!
    importance: Importance!
    type: IssueType!
    state: State
    epic: Epic
    creator: User
    worker: User
}

enum Importance {
    LOW
    MEDIUM
    HIGH
}

enum IssueType {
    STORY
    IMPROVEMENT
    TASK
    BUG
    DEPT
}

type Epic {
    id: ID!
    name: String!
    shortName: String! # length=2
    description: String!
}

type State {
    id: ID!
    name: String!
}
