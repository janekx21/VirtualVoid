-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.IssueType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type IssueType
    = Improvement
    | Bug
    | Dept
    | Task


list : List IssueType
list =
    [ Improvement, Bug, Dept, Task ]


decoder : Decoder IssueType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "IMPROVEMENT" ->
                        Decode.succeed Improvement

                    "BUG" ->
                        Decode.succeed Bug

                    "DEPT" ->
                        Decode.succeed Dept

                    "TASK" ->
                        Decode.succeed Task

                    _ ->
                        Decode.fail ("Invalid IssueType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : IssueType -> String
toString enum____ =
    case enum____ of
        Improvement ->
            "IMPROVEMENT"

        Bug ->
            "BUG"

        Dept ->
            "DEPT"

        Task ->
            "TASK"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe IssueType
fromString enumString____ =
    case enumString____ of
        "IMPROVEMENT" ->
            Just Improvement

        "BUG" ->
            Just Bug

        "DEPT" ->
            Just Dept

        "TASK" ->
            Just Task

        _ ->
            Nothing
