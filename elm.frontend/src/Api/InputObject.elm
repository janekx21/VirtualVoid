-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Enum.Importance
import Api.Enum.IssueType
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildIssueCreateInput :
    IssueCreateInputRequiredFields
    -> (IssueCreateInputOptionalFields -> IssueCreateInputOptionalFields)
    -> IssueCreateInput
buildIssueCreateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { epic = Absent }
    in
    { backlog = required____.backlog, description = required____.description, epic = optionals____.epic, importance = required____.importance, name = required____.name, points = required____.points, state = required____.state, type_ = required____.type_ }


type alias IssueCreateInputRequiredFields =
    { backlog : Api.ScalarCodecs.Uuid
    , description : String
    , importance : Api.Enum.Importance.Importance
    , name : String
    , points : Int
    , state : Api.ScalarCodecs.Uuid
    , type_ : Api.Enum.IssueType.IssueType
    }


type alias IssueCreateInputOptionalFields =
    { epic : OptionalArgument Api.ScalarCodecs.Uuid }


{-| Type for the IssueCreateInput input object.
-}
type alias IssueCreateInput =
    { backlog : Api.ScalarCodecs.Uuid
    , description : String
    , epic : OptionalArgument Api.ScalarCodecs.Uuid
    , importance : Api.Enum.Importance.Importance
    , name : String
    , points : Int
    , state : Api.ScalarCodecs.Uuid
    , type_ : Api.Enum.IssueType.IssueType
    }


{-| Encode a IssueCreateInput into a value that can be used as an argument.
-}
encodeIssueCreateInput : IssueCreateInput -> Value
encodeIssueCreateInput input____ =
    Encode.maybeObject
        [ ( "backlog", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.backlog |> Just ), ( "description", Encode.string input____.description |> Just ), ( "epic", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.epic ), ( "importance", Encode.enum Api.Enum.Importance.toString input____.importance |> Just ), ( "name", Encode.string input____.name |> Just ), ( "points", Encode.int input____.points |> Just ), ( "state", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.state |> Just ), ( "type", Encode.enum Api.Enum.IssueType.toString input____.type_ |> Just ) ]


buildIssueUpdateInput :
    IssueUpdateInputRequiredFields
    -> (IssueUpdateInputOptionalFields -> IssueUpdateInputOptionalFields)
    -> IssueUpdateInput
buildIssueUpdateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { description = Absent, epic = Absent, importance = Absent, name = Absent, points = Absent, state = Absent }
    in
    { description = optionals____.description, epic = optionals____.epic, id = required____.id, importance = optionals____.importance, name = optionals____.name, points = optionals____.points, state = optionals____.state }


type alias IssueUpdateInputRequiredFields =
    { id : Api.ScalarCodecs.Uuid }


type alias IssueUpdateInputOptionalFields =
    { description : OptionalArgument String
    , epic : OptionalArgument Api.ScalarCodecs.Uuid
    , importance : OptionalArgument Api.Enum.Importance.Importance
    , name : OptionalArgument String
    , points : OptionalArgument Int
    , state : OptionalArgument Api.ScalarCodecs.Uuid
    }


{-| Type for the IssueUpdateInput input object.
-}
type alias IssueUpdateInput =
    { description : OptionalArgument String
    , epic : OptionalArgument Api.ScalarCodecs.Uuid
    , id : Api.ScalarCodecs.Uuid
    , importance : OptionalArgument Api.Enum.Importance.Importance
    , name : OptionalArgument String
    , points : OptionalArgument Int
    , state : OptionalArgument Api.ScalarCodecs.Uuid
    }


{-| Encode a IssueUpdateInput into a value that can be used as an argument.
-}
encodeIssueUpdateInput : IssueUpdateInput -> Value
encodeIssueUpdateInput input____ =
    Encode.maybeObject
        [ ( "description", Encode.string |> Encode.optional input____.description ), ( "epic", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.epic ), ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "importance", Encode.enum Api.Enum.Importance.toString |> Encode.optional input____.importance ), ( "name", Encode.string |> Encode.optional input____.name ), ( "points", Encode.int |> Encode.optional input____.points ), ( "state", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.state ) ]
