-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias BacklogRequiredArguments =
    { id : Api.ScalarCodecs.Uuid }


{-| Finds a backlog
-}
backlog :
    BacklogRequiredArguments
    -> SelectionSet decodesTo Api.Object.Backlog
    -> SelectionSet decodesTo RootQuery
backlog requiredArgs____ object____ =
    Object.selectionForCompositeField "backlog" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) ] object____ Basics.identity


{-| Returns all backlogs
-}
backlogs :
    SelectionSet decodesTo Api.Object.Backlog
    -> SelectionSet (List decodesTo) RootQuery
backlogs object____ =
    Object.selectionForCompositeField "backlogs" [] object____ (Basics.identity >> Decode.list)


{-| Returns all epics
-}
epics :
    SelectionSet decodesTo Api.Object.Epic
    -> SelectionSet (List decodesTo) RootQuery
epics object____ =
    Object.selectionForCompositeField "epics" [] object____ (Basics.identity >> Decode.list)


type alias IssueRequiredArguments =
    { id : Api.ScalarCodecs.Uuid }


{-| Finds an issue
-}
issue :
    IssueRequiredArguments
    -> SelectionSet decodesTo Api.Object.Issue
    -> SelectionSet decodesTo RootQuery
issue requiredArgs____ object____ =
    Object.selectionForCompositeField "issue" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) ] object____ Basics.identity


{-| Returns all issues
-}
issues :
    SelectionSet decodesTo Api.Object.Issue
    -> SelectionSet (List decodesTo) RootQuery
issues object____ =
    Object.selectionForCompositeField "issues" [] object____ (Basics.identity >> Decode.list)


type alias ProjectRequiredArguments =
    { id : Api.ScalarCodecs.Uuid }


{-| Returns a project
-}
project :
    ProjectRequiredArguments
    -> SelectionSet decodesTo Api.Object.Project
    -> SelectionSet decodesTo RootQuery
project requiredArgs____ object____ =
    Object.selectionForCompositeField "project" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) ] object____ Basics.identity


{-| Returns all projects
-}
projects :
    SelectionSet decodesTo Api.Object.Project
    -> SelectionSet (List decodesTo) RootQuery
projects object____ =
    Object.selectionForCompositeField "projects" [] object____ (Basics.identity >> Decode.list)


{-| Returns all states
-}
states :
    SelectionSet decodesTo Api.Object.State
    -> SelectionSet (List decodesTo) RootQuery
states object____ =
    Object.selectionForCompositeField "states" [] object____ (Basics.identity >> Decode.list)
