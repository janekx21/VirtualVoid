-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Interface.HasID exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import CustomScalarCodecs
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))


type alias Fragments decodesTo =
    { onBacklog : SelectionSet decodesTo Api.Object.Backlog
    , onIssue : SelectionSet decodesTo Api.Object.Issue
    , onProject : SelectionSet decodesTo Api.Object.Project
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Api.Interface.HasID
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Backlog" selections____.onBacklog
        , Object.buildFragment "Issue" selections____.onIssue
        , Object.buildFragment "Project" selections____.onProject
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onBacklog = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onIssue = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onProject = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


id : SelectionSet CustomScalarCodecs.Uuid Api.Interface.HasID
id =
    Object.selectionForField "CustomScalarCodecs.Uuid" "id" [] (CustomScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUuid |> .decoder)
